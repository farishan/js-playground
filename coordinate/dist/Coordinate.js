function Coordinate(...args){const a=this.adapt(...args);this.x=a[0];this.y=a[1];this.lastX=0;this.lastY=0;this.distance=this.getDistanceFrom()}Coordinate.prototype.getDistanceFrom=function(...args){const n=this.adapt(...args);const a=this.x-n[0];const b=this.y-n[1];return Math.floor(Math.sqrt(a*a+b*b))};Coordinate.prototype.getXDistanceFrom=function(n=0){return Math.abs(this.x-n)};Coordinate.prototype.getYDistanceFrom=function(n=0){return Math.abs(this.y-n)};Coordinate.prototype.set=function(...args){const a=this.adapt(...args);this.lastX=this.x;this.lastY=this.y;this.x=a[0];this.y=a[1];this.resetDistance()};Coordinate.prototype.setX=function(x){if(x){this.lastX=this.x;this.x=x;this.resetDistance()}};Coordinate.prototype.setY=function(y){if(y){this.lastY=this.y;this.y=y;this.resetDistance()}};Coordinate.prototype.resetDistance=function(){this.distance=this.getDistanceFrom({x:this.lastX,y:this.lastY})};Coordinate.prototype.adapt=function(...args){if(args&&args.length===2){return[args[0],args[1]]}else if(args&&args.length===1){if(args[0][0]&&args[0][1]){return[args[0][0],args[0][1]]}else if(args[0].x&&args[0].y){return[args[0].x,args[0].y]}}return[0,0]};export default Coordinate;